plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

ext {
    artifactName = 'worldmod-core'
    projectDescription = 'Minecraft World Protection Mod'
    userbase = 'AMPZNetwork'
}

group = 'com.ampznetwork.worldmod'
sourceCompatibility = 21
targetCompatibility = 21

sourceSets {
    main.java.srcDirs = files("${parent.projectDir}/src/$project.name/main/java")
    main.resources.srcDirs = files(
            parent.projectDir.toString() + "/src/core/main/resources",
            parent.projectDir.toString() + "/src/core/main/antlr"
    )
    test.java.srcDirs = files("${parent.projectDir}/src/$project.name/test/java")
    test.resources.srcDirs = files("${parent.projectDir}/src/$project.name/test/java")
}

// Task to generate lexer and parser using ANTLR
task generateGrammarSource(type: JavaExec) {
    description = 'Generates ANTLR lexer and parser from grammar files'
    inputs.file(file("$parent.projectDir/src/core/main/antlr/WorldQuery.g"))
    outputs.dir(file("$parent.projectDir/src/core/main/java/com/ampznetwork/worldmod/core/antlr"))

    doFirst {
        mkdir "$parent.projectDir/src/core/main/java/com/ampznetwork/worldmod/core/antlr"
    }

    classpath = configurations.compileClasspath
    main = 'antlr.Tool'
    args = [
            '-o', "$parent.projectDir/src/core/main/java/com/ampznetwork/worldmod/core/antlr/",
            "$parent.projectDir/src/core/main/antlr/WorldQuery.g"
    ]

    doLast {
        // Iterate through all generated Java files
        fileTree(dir: outputs.files.singleFile, include: '**/*.java').forEach { File file ->
            def lines = file.readLines()

            // If there's no package declaration, add it
            if (!lines[0].startsWith('package ')) {
                lines = ["package com.ampznetwork.worldmod.core.antlr;", ''] + lines
                file.text = lines.join('\n')
            }
        }
    }
}

// Ensure that the ANTLR files are generated before compilation
compileJava.dependsOn(generateGrammarSource)

apply from: "$parent.projectDir/gradle/publishing.gradle"

repositories {
    maven { url 'https://maven.comroid.org' }
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    api project("$prefix:api")

    // antlr
    implementation 'antlr:antlr:2.7.7'

    // logger
    compileOnly 'org.apache.logging.log4j:log4j-core:2.+'

    // utility
    compileOnly 'org.projectlombok:lombok:+'
    annotationProcessor 'org.projectlombok:lombok:+'
}

task simplifyArtifact(type: Copy) {
    // api module should be slim, and only contain worldmod's own api
    dependsOn test, jar
    from jar.outputs.files.singleFile
    into "$rootDir/build/libs/"
    rename { n -> "WorldMod-core.jar" }
}
